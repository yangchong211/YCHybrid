// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios18.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name EasySdk
import AdSupport
@_exported import EasySdk
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class BannerHoverView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var headerScrollView: UIKit.UIScrollView!
  @_Concurrency.MainActor @preconcurrency public var top: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var bottom: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isTop: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isBottom: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor @preconcurrency public func setTopAction(action: @escaping (_ view: EasySdk.BannerHoverView) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func setBottomAction(action: @escaping (_ view: EasySdk.BannerHoverView) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func setScrollAction(action: @escaping (_ view: EasySdk.BannerHoverView, _ offset: CoreFoundation.CGFloat) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PalmHelper {
  public static func getResolution() -> CoreFoundation.CGSize
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PalmManager {
  public static func getDeviceIdentifier() -> Swift.String?
  public static func getDeviceVersion() -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class PalmViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @objc deinit
}
